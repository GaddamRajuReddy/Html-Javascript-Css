Javascript in scripting langulage used to develop dynamic web applications

//commnet can be write like this in js

//to get/set data of refrence of html elemnt by id class, tag
//get
document.getElementsById("example");
document.getElementsByClassName("example");
document.getElementsByName("fname");
document.getElementsByTagName("LI");

//set
document.getElementById("demo").innerHTML = "<br>Hello JavaScript";
document.getElementsByClassName("demo").style.display = "none";
document.getElementById("demo").innerText = "text";

JavaScript identifiers (names) must begin with:
1. A letter (A-Z or a-z)
2. A dollar sign ($)
3. Or an underscore (_)

//variabls
var cust="a" , const cust=5 , let cust=false;

var carName;			//undefined

var carName = "Volvo";		// redeclaring posible for var 
var carName;			// it can't loose its value 

var x = "5" + 2 + 3;		//523

var x = 2 + 3 + "5";		//55

var x = "100";
var y = "10";
var z = x - y;			//90

var x = 100 / "Apple";
isNaN(x); 			//returns True

var x = NaN;
var y = "5";
var z = x + y;			//NaN5

var x = NaN;
var y = 5;
var z = x + y;         		// z will be NaN


var x = 10;			//assignment operators
x += 5;


= is used for assigning values to a variable in JavaScript.
== is used for comparison between two variables irrespective of the datatype of variable.
=== is used for comparision between two variables and check datatype and compare two values.

typeof null  			//the data type of null is an object.
typeof undefined		//the data type of undefined is an undefined.
typeof "John"                 	// Returns "string"
typeof 3.14                   	// Returns "number"
typeof NaN                    	// Returns "number"
typeof false                  	// Returns "boolean"
typeof [1,2,3,4]              	// Returns "object"
typeof {name:'John', age:34}  	// Returns "object"
typeof new Date()             	// Returns "object"
typeof function () {}         	// Returns "function"
typeof myCar                  	// Returns "undefined" *
typeof null                   	// Returns "object"


undefined and null are equal in value but different in data type: both defination is a variable without value is undefined/null


data types: 
string
number
boolean
undefined
null
array

object
function

var y = new Number(123);
var y = new String("John");
var x = new Array("Saab", "Volvo", "BMW");
var d = new Date();
var y = new Boolean(false);


Number Methods:

toString()			//returns a number as a string.
valueOf() 			//returns a number as a number.
toFixed(2)			//returns a string, with the number written with a specified number of decimals:
toPrecision() 	//returns a string, with a number written with a specified length:

Converting Variables to Numbers:
Number()			  //Returns a number, converted from its argument.spacess not allowed

parseFloat()		//Parses its argument and returns a floating point number, spacess allowed and first no taken

parseInt()			//Parses its argument and returns an integer,spacess allowed and first no taken
parseInt("10.33");      	// returns 10
parseInt("10 20 30");   	// returns 10



object:  

var person = {firstName:"John", lastName:"Doe", age:50, eyeColor:"blue"};
//read data from objct
person.firstname	o/p- John
person["firstname"]	o/p- John

//add extra properties to object
person["country"]="india";

//looping object or to diaply keys and values in object
for (var key of Object.keys(person)) {
    console.log(key + " -> " + person[key])    o/p- firstname -> John
}


//check key exist in object or not 
if (person.hasOwnProperty("firstname"))

//delete perticular key and value from object
delete person.age;

//create empty object
var person={};

//clear object
person=null;

//to get length of object
var size = Object.keys(person).length;


Array: 
var cars = ["Saab", "Volvo", "BMW"];   //good way
or
var cars = new Array("Saab", "Volvo", "BMW"); //bad way
or
var cars = [{car1:"Saab"}];   //array of objects

//read data from array using idex
cars[0]			o/p saab

//add extra value in array at end of array
cars.push("walk")

//remove last element in array
cars.pop();   

//delete using inex
delete cars[0];

//update value of first index in array 
cars[0]	= 3;

//get length/size of array
cars.length		o/p 3

//create emty array
cars=[]

//check it is array or not
Array.isArray(cars);	o/p array
or
typeof cars  



array Iteration Methods:

foreach():use if you want to loop only

var fruits = ["apple", "orange", "cherry"];

fruits.forEach((value, index, array)=>{
console.log(value)
});

map(): creates a new array with updated values but can not change original values, use if you want to get new array with updated values,

var array= cars.map((value, index, array)=>{
		    return value/10;
		});

filter(): creates a new array with filtering data but can not change original values,use if you want to get new array with filter,

var array= cars.filter((value, index, array)=>{
		    return value=="walk";
		});

reduce(): use if you want to sum all array values ex: [1,2,3] if you want sum 6 then use reduce.

var numbers1 = [45, 4, 9, 16, 25];
var total= numbers1.reduce((total,value, index, array)=>{
		   return total + value;
		});


every(): use if you want to check, all array values passed condition

var numbers1 = [45, 4, 9, 16, 25];
var ispassed= numbers1.every((value, index, array)=>{
		   return value>18;				o/p false
		});

some(): use if you want to check, some of array values passed condition

var numbers1 = [45, 4, 9, 16, 25];
var ispassed=numbers1.some((value, index, array)=>{
		   return value>18;				o/p true
		});


indexOf(): use if you want to get index of value in array
var a = numbers1.indexOf(16);					o/p 3


find(): method returns the value of the first array element that passes a test function.

var numbers1 = [45, 4, 9, 16, 25];
var ispassed=numbers1.find((value, index, array)=>{
		   return value>18;				o/p 45
		});

findIndex(): method returns the index of the first array element that passes a test function.
var numbers1 = [45, 4, 9, 16, 25];
var ispassed=numbers1.findIndex((total,value, index, array)=>{
		   return value>18;				o/p 0
		});



splice(): method can be used to add new items to an array at specified postions:
var fruits = ["Banana", "Orange", "Apple", "Mango"];	//adding at 2nd position and 0 remval
fruits.splice(2, 0, "Lemon", "Kiwi");			o/p Banana,Orange,Lemon,Kiwi,Apple,Mango
fruits.splice(0, 1);					//remove at position 0 , with 1 remove element



concat(): method creates a new array by merging (concatenating) existing arrays:
var myGirls = ["Cecilie"];
var myBoys = ["Emil"];
var myChildren = myGirls.concat(myBoys);   		o/p Cecilie,emil


slice(): method slices out a piece of an array into a new array. 
var fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];	//1 is start index, 3 is last index but not include last one
var citrus = fruits.slice(1,3);					o/p 1)Banana,Orange,Lemon,Apple,Mango      2) Orange,Lemon
var citrus = fruits.slice(1);					o/p 1)Banana,Orange,Lemon,Apple,Mango      2) Orange,Lemon,Apple,Mango


toString(): convert array to comma saparated string.
join() method also joins all array elements into a string.
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.join(" * ");

//sort the array
cars.sort((a, b)=>{return a - b});

//reverese the elements in array
cars.reverse();



functions:

function sample(x) {
  return x*20;
}

events:

onchange	An HTML element has been changed
onclick		The user clicks an HTML element
onmouseover	The user moves the mouse over an HTML element
onmouseout	The user moves the mouse away from an HTML element
onkeyup		The user up the a keyboard key
onkeydown	The user pushes a keyboard key
onkeypress	The user combination of up and push a keyboard key
onload		The browser has finished loading the page



Date:

getFullYear()	Get the year as a four digit number (yyyy)
getMonth()	Get the month as a number (0-11)
getDate()	Get the day as a number (1-31)
getHours()	Get the hour (0-23)
getMinutes()	Get the minute (0-59)
getSeconds()	Get the second (0-59)
getMilliseconds()	Get the millisecond (0-999)
getTime()	Get the time (milliseconds since January 1, 1970)
getDay()	Get the weekday as a number (0-6)
Date.now()	Get the time. ECMAScript 5.

getUTCDate()	Same as getDate(), but returns the UTC date
getUTCDay()	Same as getDay(), but returns the UTC day
getUTCFullYear()	Same as getFullYear(), but returns the UTC year
getUTCHours()	Same as getHours(), but returns the UTC hour
getUTCMilliseconds()	Same as getMilliseconds(), but returns the UTC milliseconds
getUTCMinutes()	Same as getMinutes(), but returns the UTC minutes
getUTCMonth()	Same as getMonth(), but returns the UTC month
getUTCSeconds()	Same as getSeconds(), but returns the UTC seconds

var d = new Date();
var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

document.getElementById("demo").innerHTML = months[d.getMonth()];



Math funtins:

Math.round(4.7);    // returns 5
Math.round(4.4);    // returns 4
Math.random();      // returns a random number


conditions:
if
if else
while
for 
switch

switch (true) {
  case 6:
    text = "Today is Saturday";
    break;
  case 0:
    text = "Today is Sunday";
    break;
  default:
    text = "Looking forward to the Weekend";





}


arrow funtions:

hello = () => {
  return "Hello World!";
}
document.getElementById("demo").innerHTML = hello();


exception handling:

try {
  Block of code to try
}
catch(err) {
  Block of code to handle errors
}
finally {
  Block of code to be executed regardless of the try / catch result
}




this:

var person = {
  firstName: "John",
  lastName : "Doe",
  id       : 5566,
  fullName : function() {
    return this.firstName + " " + this.lastName;
  }
};




$(document).ready() 		//method will run once the page DOM is ready to execute JavaScript code.
$(window).load()		//runs only once the entire page is ready (not only DOM).






